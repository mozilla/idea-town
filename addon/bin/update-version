#!/usr/bin/env node

var fs = require('fs');
var util = require('util');
var childProcess = require('child_process');

// Load the current package.json
var packageFilename = __dirname + '/../build/package.json';
var package = require(packageFilename);

// Come up with a version tag suffix based on CIRCLE_TAG, or fall back to
// looking up the current git commit hash.
var tag;
if (process.env['CIRCLE_TAG']) {
  tag = 'tag-' + process.env['CIRCLE_TAG'];
} else {
  // Note: Must use short git hash, because AMO rejects versions > 32 chars
  tag = 'dev-' + childProcess.execSync('git rev-parse --short HEAD')
                             .toString('utf-8')
                             .trim();
}

// Update the version tag suffix.
var versionParts = package.version.split('-');
var origVersion = package.version;
package.version = versionParts[0] + '-' + tag;

// Write the modified package.json
var packageJSON = JSON.stringify(package, null, '  ');
fs.writeFileSync(packageFilename, packageJSON);

var manifestFilename = __dirname + '/../build/webextension/manifest.json';
var manifest = require(manifestFilename);
manifest.version = package.version;
var manifestJSON = JSON.stringify(manifest, null, '  ');
fs.writeFileSync(manifestFilename, manifestJSON);

var installFilename = __dirname + '/../build/install.rdf';
var install = fs.readFileSync(installFilename, { encoding: 'utf8' });
fs.writeFileSync(installFilename, install.replace(
  /<em:version>([\d\.]+)<\/em:version>/,
  `<em:version>${package.version}</em:version>`
));
